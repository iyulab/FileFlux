<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="FileFlux Code Analysis Rules" Description="Code analysis rules for FileFlux projects" ToolsVersion="16.0">
  
  <!-- General Rules -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers">
    <!-- Design Rules -->
    <Rule Id="CA1000" Action="Warning" />  <!-- Do not declare static members on generic types -->
    <Rule Id="CA1001" Action="Warning" />  <!-- Types that own disposable fields should be disposable -->
    <Rule Id="CA1002" Action="Info" />     <!-- Do not expose generic lists -->
    <Rule Id="CA1003" Action="Warning" />  <!-- Use generic event handler instances -->
    <Rule Id="CA1005" Action="Info" />     <!-- Avoid excessive parameters on generic types -->
    <Rule Id="CA1008" Action="Info" />     <!-- Enums should have zero value -->
    <Rule Id="CA1010" Action="Warning" />  <!-- Collections should implement generic interface -->
    <Rule Id="CA1012" Action="Warning" />  <!-- Abstract types should not have constructors -->
    <Rule Id="CA1014" Action="None" />     <!-- Mark assemblies with CLSCompliant -->
    <Rule Id="CA1016" Action="Warning" />  <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1017" Action="None" />     <!-- Mark assemblies with ComVisible -->
    <Rule Id="CA1018" Action="Warning" />  <!-- Mark attributes with AttributeUsageAttribute -->
    <Rule Id="CA1019" Action="Info" />     <!-- Define accessors for attribute arguments -->
    <Rule Id="CA1021" Action="Warning" />  <!-- Avoid out parameters -->
    <Rule Id="CA1024" Action="Info" />     <!-- Use properties where appropriate -->
    <Rule Id="CA1027" Action="Info" />     <!-- Mark enums with FlagsAttribute -->
    <Rule Id="CA1028" Action="Warning" />  <!-- Enum Storage should be Int32 -->
    <Rule Id="CA1030" Action="Info" />     <!-- Use events where appropriate -->
    <Rule Id="CA1031" Action="Info" />     <!-- Do not catch general exception types -->
    <Rule Id="CA1032" Action="Warning" />  <!-- Implement standard exception constructors -->
    <Rule Id="CA1033" Action="Info" />     <!-- Interface methods should be callable by child types -->
    <Rule Id="CA1034" Action="Info" />     <!-- Nested types should not be visible -->
    <Rule Id="CA1036" Action="Warning" />  <!-- Override methods on comparable types -->
    <Rule Id="CA1040" Action="Info" />     <!-- Avoid empty interfaces -->
    <Rule Id="CA1041" Action="Warning" />  <!-- Provide ObsoleteAttribute message -->
    <Rule Id="CA1043" Action="Info" />     <!-- Use Integral Or String Argument For Indexers -->
    <Rule Id="CA1044" Action="Info" />     <!-- Properties should not be write only -->
    <Rule Id="CA1045" Action="Info" />     <!-- Do not pass types by reference -->
    <Rule Id="CA1046" Action="Info" />     <!-- Do not overload operator equals on reference types -->
    <Rule Id="CA1047" Action="Warning" />  <!-- Do not declare protected member in sealed type -->
    <Rule Id="CA1050" Action="Warning" />  <!-- Declare types in namespaces -->
    <Rule Id="CA1051" Action="Warning" />  <!-- Do not declare visible instance fields -->
    <Rule Id="CA1052" Action="Warning" />  <!-- Static holder types should be Static or NotInheritable -->
    <Rule Id="CA1054" Action="Info" />     <!-- Uri parameters should not be strings -->
    <Rule Id="CA1055" Action="Info" />     <!-- Uri return values should not be strings -->
    <Rule Id="CA1056" Action="Info" />     <!-- Uri properties should not be strings -->
    <Rule Id="CA1058" Action="Info" />     <!-- Types should not extend certain base types -->
    <Rule Id="CA1060" Action="Info" />     <!-- Move pinvokes to native methods class -->
    <Rule Id="CA1061" Action="Warning" />  <!-- Do not hide base class methods -->
    <Rule Id="CA1062" Action="Info" />     <!-- Validate arguments of public methods -->
    <Rule Id="CA1063" Action="Warning" />  <!-- Implement IDisposable Correctly -->
    <Rule Id="CA1064" Action="Warning" />  <!-- Exceptions should be public -->
    <Rule Id="CA1065" Action="Warning" />  <!-- Do not raise exceptions in unexpected locations -->
    <Rule Id="CA1066" Action="Warning" />  <!-- Type {0} should implement IEquatable<T> because it overrides Equals -->
    <Rule Id="CA1067" Action="Warning" />  <!-- Override Object.Equals(object) when implementing IEquatable<T> -->
    <Rule Id="CA1068" Action="Warning" />  <!-- CancellationToken parameters must come last -->
    <Rule Id="CA1069" Action="Warning" />  <!-- Enums values should not be duplicated -->
    
    <!-- Globalization Rules -->
    <Rule Id="CA1303" Action="None" />     <!-- Do not pass literals as localized parameters -->
    <Rule Id="CA1304" Action="Info" />     <!-- Specify CultureInfo -->
    <Rule Id="CA1305" Action="Info" />     <!-- Specify IFormatProvider -->
    <Rule Id="CA1307" Action="Info" />     <!-- Specify StringComparison -->
    <Rule Id="CA1308" Action="Info" />     <!-- Normalize strings to uppercase -->
    <Rule Id="CA1309" Action="Info" />     <!-- Use ordinal stringcomparison -->
    <Rule Id="CA1310" Action="Warning" />  <!-- Specify StringComparison for correctness -->
    
    <!-- Interoperability Rules -->
    <Rule Id="CA1401" Action="Warning" />  <!-- P/Invokes should not be visible -->
    <Rule Id="CA1416" Action="Warning" />  <!-- Validate platform compatibility -->
    <Rule Id="CA1417" Action="Warning" />  <!-- Do not use 'OutAttribute' on string parameters for P/Invokes -->
    <Rule Id="CA1418" Action="Warning" />  <!-- Use valid platform string -->
    
    <!-- Maintainability Rules -->
    <Rule Id="CA1501" Action="Info" />     <!-- Avoid excessive inheritance -->
    <Rule Id="CA1502" Action="Info" />     <!-- Avoid excessive complexity -->
    <Rule Id="CA1505" Action="Info" />     <!-- Avoid unmaintainable code -->
    <Rule Id="CA1506" Action="Info" />     <!-- Avoid excessive class coupling -->
    <Rule Id="CA1507" Action="Warning" />  <!-- Use nameof to express symbol names -->
    <Rule Id="CA1508" Action="Info" />     <!-- Avoid dead conditional code -->
    <Rule Id="CA1509" Action="Warning" />  <!-- Invalid entry in code metrics rule specification file -->
    
    <!-- Naming Rules -->
    <Rule Id="CA1700" Action="Info" />     <!-- Do not name enum values 'Reserved' -->
    <Rule Id="CA1707" Action="None" />     <!-- Identifiers should not contain underscores -->
    <Rule Id="CA1708" Action="Info" />     <!-- Identifiers should differ by more than case -->
    <Rule Id="CA1710" Action="Info" />     <!-- Identifiers should have correct suffix -->
    <Rule Id="CA1711" Action="Info" />     <!-- Identifiers should not have incorrect suffix -->
    <Rule Id="CA1712" Action="Info" />     <!-- Do not prefix enum values with type name -->
    <Rule Id="CA1713" Action="Info" />     <!-- Events should not have 'Before' or 'After' prefix -->
    <Rule Id="CA1714" Action="Info" />     <!-- Flags enums should have plural names -->
    <Rule Id="CA1715" Action="Info" />     <!-- Identifiers should have correct prefix -->
    <Rule Id="CA1716" Action="Info" />     <!-- Identifiers should not match keywords -->
    <Rule Id="CA1717" Action="Info" />     <!-- Only FlagsAttribute enums should have plural names -->
    <Rule Id="CA1720" Action="Info" />     <!-- Identifier contains type name -->
    <Rule Id="CA1721" Action="Info" />     <!-- Property names should not match get methods -->
    <Rule Id="CA1724" Action="Info" />     <!-- Type names should not match namespaces -->
    <Rule Id="CA1725" Action="Info" />     <!-- Parameter names should match base declaration -->
    
    <!-- Performance Rules -->
    <Rule Id="CA1802" Action="Info" />     <!-- Use literals where appropriate -->
    <Rule Id="CA1805" Action="Info" />     <!-- Do not initialize unnecessarily -->
    <Rule Id="CA1806" Action="Info" />     <!-- Do not ignore method results -->
    <Rule Id="CA1810" Action="Info" />     <!-- Initialize reference type static fields inline -->
    <Rule Id="CA1812" Action="Info" />     <!-- Avoid uninstantiated internal classes -->
    <Rule Id="CA1813" Action="Info" />     <!-- Avoid unsealed attributes -->
    <Rule Id="CA1814" Action="Info" />     <!-- Prefer jagged arrays over multidimensional -->
    <Rule Id="CA1815" Action="Warning" />  <!-- Override equals and operator equals on value types -->
    <Rule Id="CA1816" Action="Warning" />  <!-- Dispose methods should call SuppressFinalize -->
    <Rule Id="CA1819" Action="Info" />     <!-- Properties should not return arrays -->
    <Rule Id="CA1820" Action="Info" />     <!-- Test for empty strings using string length -->
    <Rule Id="CA1821" Action="Warning" />  <!-- Remove empty Finalizers -->
    <Rule Id="CA1822" Action="Info" />     <!-- Mark members as static -->
    <Rule Id="CA1823" Action="Warning" />  <!-- Avoid unused private fields -->
    <Rule Id="CA1824" Action="Warning" />  <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
    <Rule Id="CA1825" Action="Warning" />  <!-- Avoid zero-length array allocations -->
    <Rule Id="CA1826" Action="Warning" />  <!-- Do not use Count() or LongCount() when Any() can be used -->
    <Rule Id="CA1827" Action="Warning" />  <!-- Do not use Count() or LongCount() when Any() can be used -->
    <Rule Id="CA1828" Action="Warning" />  <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used -->
    <Rule Id="CA1829" Action="Warning" />  <!-- Use Length/Count property instead of Count() when available -->
    <Rule Id="CA1830" Action="Warning" />  <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder -->
    <Rule Id="CA1831" Action="Warning" />  <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1832" Action="Warning" />  <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1833" Action="Warning" />  <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1834" Action="Warning" />  <!-- Consider using 'StringBuilder.Append(char)' when applicable -->
    <Rule Id="CA1835" Action="Warning" />  <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' -->
    <Rule Id="CA1836" Action="Warning" />  <!-- Prefer IsEmpty over Count -->
    <Rule Id="CA1837" Action="Warning" />  <!-- Use 'Environment.ProcessId' -->
    <Rule Id="CA1838" Action="Warning" />  <!-- Avoid 'StringBuilder' parameters for P/Invokes -->
    <Rule Id="CA1839" Action="Warning" />  <!-- Use 'Environment.VersionString' -->
    <Rule Id="CA1840" Action="Warning" />  <!-- Use 'Environment.CurrentManagedThreadId' -->
    <Rule Id="CA1841" Action="Warning" />  <!-- Prefer Dictionary.Contains methods -->
    <Rule Id="CA1842" Action="Warning" />  <!-- Do not use 'WhenAll' with a single task -->
    <Rule Id="CA1843" Action="Warning" />  <!-- Do not use 'WaitAll' with a single task -->
    <Rule Id="CA1844" Action="Warning" />  <!-- Provide memory-based overrides of async methods when subclassing 'Stream' -->
    <Rule Id="CA1845" Action="Warning" />  <!-- Use span-based 'string.Concat' -->
    <Rule Id="CA1846" Action="Warning" />  <!-- Prefer 'AsSpan' over 'Substring' -->
    <Rule Id="CA1847" Action="Warning" />  <!-- Use char literal for a single character lookup -->
    <Rule Id="CA1848" Action="Info" />     <!-- Use the LoggerMessage delegates -->
    <Rule Id="CA1849" Action="Warning" />  <!-- Call async methods when in an async method -->
    
    <!-- Reliability Rules -->
    <Rule Id="CA2000" Action="Warning" />  <!-- Dispose objects before losing scope -->
    <Rule Id="CA2002" Action="Warning" />  <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2007" Action="None" />     <!-- Consider calling ConfigureAwait on the awaited task -->
    <Rule Id="CA2008" Action="Warning" />  <!-- Do not create tasks without passing a TaskScheduler -->
    <Rule Id="CA2009" Action="Warning" />  <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
    <Rule Id="CA2011" Action="Warning" />  <!-- Avoid infinite recursion -->
    <Rule Id="CA2012" Action="Warning" />  <!-- Use ValueTasks correctly -->
    <Rule Id="CA2013" Action="Warning" />  <!-- Do not use ReferenceEquals with value types -->
    <Rule Id="CA2014" Action="Warning" />  <!-- Do not use stackalloc in loops -->
    <Rule Id="CA2015" Action="Warning" />  <!-- Do not define finalizers for types derived from MemoryManager<T> -->
    <Rule Id="CA2016" Action="Warning" />  <!-- Forward the 'CancellationToken' parameter to methods that take one -->
    <Rule Id="CA2017" Action="Warning" />  <!-- Parameter count mismatch -->
    <Rule Id="CA2018" Action="Warning" />  <!-- 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument -->
    
    <!-- Security Rules -->
    <Rule Id="CA2100" Action="Warning" />  <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="CA2101" Action="Warning" />  <!-- Specify marshaling for P/Invoke string arguments -->
    <Rule Id="CA2109" Action="Warning" />  <!-- Review visible event handlers -->
    <Rule Id="CA2119" Action="Warning" />  <!-- Seal methods that satisfy private interfaces -->
    <Rule Id="CA2153" Action="Warning" />  <!-- Do Not Catch Corrupted State Exceptions -->
    <Rule Id="CA2300" Action="Warning" />  <!-- Do not use insecure deserializer BinaryFormatter -->
    <Rule Id="CA2301" Action="Warning" />  <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder -->
    <Rule Id="CA2302" Action="Warning" />  <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize -->
    <Rule Id="CA2305" Action="Warning" />  <!-- Do not use insecure deserializer LosFormatter -->
    <Rule Id="CA2310" Action="Warning" />  <!-- Do not use insecure deserializer NetDataContractSerializer -->
    <Rule Id="CA2311" Action="Warning" />  <!-- Do not deserialize without first setting NetDataContractSerializer.Binder -->
    <Rule Id="CA2312" Action="Warning" />  <!-- Ensure NetDataContractSerializer.Binder is set before deserializing -->
    <Rule Id="CA2315" Action="Warning" />  <!-- Do not use insecure deserializer ObjectStateFormatter -->
    <Rule Id="CA2321" Action="Warning" />  <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver -->
    <Rule Id="CA2322" Action="Warning" />  <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing -->
    <Rule Id="CA2326" Action="Warning" />  <!-- Do not use TypeNameHandling values other than None -->
    <Rule Id="CA2327" Action="Warning" />  <!-- Do not use insecure JsonSerializerSettings -->
    <Rule Id="CA2328" Action="Warning" />  <!-- Ensure that JsonSerializerSettings are secure -->
    <Rule Id="CA2329" Action="Warning" />  <!-- Do not deserialize with JsonSerializer using an insecure configuration -->
    <Rule Id="CA2330" Action="Warning" />  <!-- Ensure that JsonSerializer has a secure configuration when deserializing -->
    
    <!-- Usage Rules -->
    <Rule Id="CA2200" Action="Warning" />  <!-- Rethrow to preserve stack details -->
    <Rule Id="CA2201" Action="Warning" />  <!-- Do not raise reserved exception types -->
    <Rule Id="CA2207" Action="Warning" />  <!-- Initialize value type static fields inline -->
    <Rule Id="CA2208" Action="Warning" />  <!-- Instantiate argument exceptions correctly -->
    <Rule Id="CA2211" Action="Warning" />  <!-- Non-constant fields should not be visible -->
    <Rule Id="CA2213" Action="Warning" />  <!-- Disposable fields should be disposed -->
    <Rule Id="CA2214" Action="Warning" />  <!-- Do not call overridable methods in constructors -->
    <Rule Id="CA2215" Action="Warning" />  <!-- Dispose methods should call base class dispose -->
    <Rule Id="CA2216" Action="Warning" />  <!-- Disposable types should declare finalizer -->
    <Rule Id="CA2217" Action="Warning" />  <!-- Do not mark enums with FlagsAttribute -->
    <Rule Id="CA2218" Action="Warning" />  <!-- Override GetHashCode on overriding Equals -->
    <Rule Id="CA2219" Action="Warning" />  <!-- Do not raise exceptions in finally clauses -->
    <Rule Id="CA2224" Action="Warning" />  <!-- Override Equals on overloading operator equals -->
    <Rule Id="CA2225" Action="Info" />     <!-- Operator overloads have named alternates -->
    <Rule Id="CA2226" Action="Warning" />  <!-- Operators should have symmetrical overloads -->
    <Rule Id="CA2227" Action="Warning" />  <!-- Collection properties should be read only -->
    <Rule Id="CA2229" Action="Warning" />  <!-- Implement serialization constructors -->
    <Rule Id="CA2231" Action="Warning" />  <!-- Overload operator equals on overriding value type Equals -->
    <Rule Id="CA2234" Action="Info" />     <!-- Pass system uri objects instead of strings -->
    <Rule Id="CA2235" Action="Warning" />  <!-- Mark all non-serializable fields -->
    <Rule Id="CA2237" Action="Warning" />  <!-- Mark ISerializable types with serializable -->
    <Rule Id="CA2241" Action="Warning" />  <!-- Provide correct arguments to formatting methods -->
    <Rule Id="CA2242" Action="Warning" />  <!-- Test for NaN correctly -->
    <Rule Id="CA2243" Action="Warning" />  <!-- Attribute string literals should parse correctly -->
    <Rule Id="CA2244" Action="Warning" />  <!-- Do not duplicate indexed element initializations -->
    <Rule Id="CA2245" Action="Warning" />  <!-- Do not assign a property to itself -->
    <Rule Id="CA2246" Action="Warning" />  <!-- Assigning symbol and its member in the same statement -->
    <Rule Id="CA2247" Action="Warning" />  <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum -->
    <Rule Id="CA2248" Action="Warning" />  <!-- Provide correct 'enum' argument to 'Enum.HasFlag' -->
    <Rule Id="CA2249" Action="Warning" />  <!-- Consider using 'string.Contains' instead of 'string.IndexOf' -->
    <Rule Id="CA2250" Action="Warning" />  <!-- Use 'ThrowIfCancellationRequested' -->
    <Rule Id="CA2251" Action="Warning" />  <!-- Use 'string.Equals' -->
    <Rule Id="CA2252" Action="Warning" />  <!-- This API requires opting into preview features -->
    <Rule Id="CA2253" Action="Warning" />  <!-- Named placeholders should not be numeric values -->
    <Rule Id="CA2254" Action="Warning" />  <!-- Template should be a static expression -->
    <Rule Id="CA2255" Action="Warning" />  <!-- The 'ModuleInitializer' attribute should not be used in libraries -->
    <Rule Id="CA2256" Action="Warning" />  <!-- All members declared in parent interfaces must have an implementation in all applied DynamicInterfaceCastableImplementation-attributed interfaces -->
    <Rule Id="CA2257" Action="Warning" />  <!-- Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static' -->
    <Rule Id="CA2258" Action="Warning" />  <!-- Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported -->
  </Rules>
  
  <!-- Note: Async/Await CA2007 rule is configured above in the main rules section -->

</RuleSet>