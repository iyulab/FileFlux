name: 📦 NuGet Package Build & Publish

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/Directory.Build.props'
      - 'src/**/*.cs'
      - 'src/**/*.csproj'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/Directory.Build.props'
      - 'src/**/*.cs'
      - 'src/**/*.csproj'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish to NuGet.org'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Version 추출 및 변경 감지
  detect-version:
    name: 🔍 Detect Version Changes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      version_changed: ${{ steps.check-changes.outputs.changed }}
      should_publish: ${{ steps.determine-publish.outputs.should_publish }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 📊 Extract Version from Directory.Build.props
        id: extract-version
        run: |
          VERSION=$(grep -oP '(?<=<VersionPrefix>)[^<]*' src/Directory.Build.props)
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔄 Check Version Changes
        id: check-changes
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "src/Directory.Build.props"; then
            echo "Directory.Build.props has changed"
            PREV_VERSION=$(git show HEAD~1:src/Directory.Build.props | grep -oP '(?<=<VersionPrefix>)[^<]*' || echo "0.0.0")
            CURR_VERSION="${{ steps.extract-version.outputs.version }}"
            echo "Previous version: $PREV_VERSION"
            echo "Current version: $CURR_VERSION"
            if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $CURR_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Directory.Build.props unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Determine Publish Strategy
        id: determine-publish
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_publish }}" == "true" ]]; then
            echo "Force publish requested"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ steps.check-changes.outputs.changed }}" == "true" ]]; then
            echo "Main branch with version change - will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Will not publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  # 빌드만 수행 (테스트 제외)
  build:
    name: 🔨 Build Solution
    runs-on: ubuntu-latest
    needs: detect-version
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore src/

      - name: 🔨 Build Solution
        run: dotnet build src/ --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

  # NuGet 패키지 빌드
  build-package:
    name: 📦 Build NuGet Package
    runs-on: ubuntu-latest
    needs: [detect-version, build]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🔨 Build & Pack
        run: |
          chmod +x scripts/build-and-pack.ps1
          pwsh scripts/build-and-pack.ps1 -Version "${{ needs.detect-version.outputs.version }}" -CleanFirst

      - name: 📋 List Generated Packages
        run: ls -la nupkg/

      - name: 📤 Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/*.nupkg

      - name: 📤 Upload Symbol Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-symbols
          path: nupkg/*.snupkg

  # NuGet.org에 게시
  publish-nuget:
    name: 🚀 Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: [detect-version, build-package]
    if: needs.detect-version.outputs.should_publish == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/

      - name: 📦 Download Symbol Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-symbols
          path: nupkg/

      - name: 📋 Verify Downloaded Packages
        run: ls -la nupkg/

      - name: 🚀 Publish to NuGet.org
        run: |
          for package in nupkg/*.nupkg; do
            echo "Publishing $package..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate \
              --no-symbols
          done
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: 🏷️ Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ needs.detect-version.outputs.version }}"
          git push origin "v${{ needs.detect-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 릴리즈 노트 생성
  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [detect-version, publish-nuget]
    if: needs.detect-version.outputs.should_publish == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/

      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          ## 🚀 FileFlux v${{ needs.detect-version.outputs.version }}
          
          ### 📦 NuGet Package
          ```bash
          dotnet add package FileFlux --version ${{ needs.detect-version.outputs.version }}
          ```
          
          ### 🔗 Links
          - [NuGet Package](https://www.nuget.org/packages/FileFlux/${{ needs.detect-version.outputs.version }})
          - [Documentation](https://github.com/iyulab/FileFlux#readme)
          
          ### 📊 Benchmarks
          All document formats achieve **A+ performance grade** with excellent memory efficiency.
          
          ### 🛠️ What's Included
          - Complete RAG-optimized document processing SDK
          - Support for PDF, DOCX, Excel, PowerPoint, Markdown and more
          - Intelligent chunking strategies with semantic boundary detection
          - Advanced metadata extraction and performance optimization
          
          ---
          
          🤖 *This release was automatically generated and published by GitHub Actions*
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.detect-version.outputs.version }}
          name: FileFlux v${{ needs.detect-version.outputs.version }}
          body_path: release-notes.md
          files: nupkg/*.nupkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 알림
  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [detect-version, create-release]
    if: always() && needs.detect-version.outputs.should_publish == 'true'
    steps:
      - name: 🎉 Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 Successfully published FileFlux v${{ needs.detect-version.outputs.version }} to NuGet.org!"
          echo "📦 Package URL: https://www.nuget.org/packages/FileFlux/${{ needs.detect-version.outputs.version }}"

      - name: ❌ Failure Notification
        if: needs.create-release.result != 'success'
        run: |
          echo "❌ Failed to publish FileFlux v${{ needs.detect-version.outputs.version }}"
          exit 1