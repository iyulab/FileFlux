name: 📦 NuGet Package Build & Publish

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/Directory.Build.props'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish to NuGet.org'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Version 추출 및 변경 감지
  detect-version:
    name: 🔍 Detect Version Changes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 📊 Extract Version from Directory.Build.props
        id: extract-version
        run: |
          VERSION=$(grep -oP '(?<=<VersionPrefix>)[^<]*' src/Directory.Build.props)
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: ℹ️ Version Info
        run: |
          echo "Detected version: ${{ steps.extract-version.outputs.version }}"
          echo "This workflow will proceed to build and publish the NuGet package."

  # NuGet 패키지 빌드 (빌드 포함)
  build-package:
    name: 📦 Build & Pack NuGet Package
    runs-on: ubuntu-latest
    needs: detect-version
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Create NuGet Package
        run: |
          dotnet pack src/FileFlux/FileFlux.csproj \
            --configuration Release \
            --output nupkg/ \
            -p:PackageVersion=${{ needs.detect-version.outputs.version }} \
            -p:AssemblyVersion=${{ needs.detect-version.outputs.version }} \
            -p:FileVersion=${{ needs.detect-version.outputs.version }}

      - name: 📋 List Generated Packages
        run: ls -la nupkg/

      - name: 📤 Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/*.nupkg

      - name: 📤 Upload Symbol Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-symbols
          path: nupkg/*.snupkg

  # NuGet.org에 게시
  publish-nuget:
    name: 🚀 Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: [detect-version, build-package]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/

      - name: 📦 Download Symbol Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-symbols
          path: nupkg/

      - name: 📋 Verify Downloaded Packages
        run: ls -la nupkg/

      - name: 🚀 Publish to NuGet.org
        run: |
          for package in nupkg/*.nupkg; do
            echo "Publishing $package..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate \
              --no-symbols
          done
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: 🏷️ Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ needs.detect-version.outputs.version }}"
          git push origin "v${{ needs.detect-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 릴리즈 노트 생성
  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [detect-version, publish-nuget]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/

      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          ## 🚀 FileFlux v${{ needs.detect-version.outputs.version }}
          
          ### 📦 NuGet Package
          ```bash
          dotnet add package FileFlux --version ${{ needs.detect-version.outputs.version }}
          ```
          
          ### 🔗 Links
          - [NuGet Package](https://www.nuget.org/packages/FileFlux/${{ needs.detect-version.outputs.version }})
          - [Documentation](https://github.com/iyulab/FileFlux#readme)
          
          ### 📊 Benchmarks
          All document formats achieve **A+ performance grade** with excellent memory efficiency.
          
          ### 🛠️ What's Included
          - Complete RAG-optimized document processing SDK
          - Support for PDF, DOCX, Excel, PowerPoint, Markdown and more
          - Intelligent chunking strategies with semantic boundary detection
          - Advanced metadata extraction and performance optimization
          
          ---
          
          🤖 *This release was automatically generated and published by GitHub Actions*
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.detect-version.outputs.version }}
          name: FileFlux v${{ needs.detect-version.outputs.version }}
          body_path: release-notes.md
          files: nupkg/*.nupkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 알림
  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [detect-version, create-release]
    if: always()
    steps:
      - name: 🎉 Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 Successfully published FileFlux v${{ needs.detect-version.outputs.version }} to NuGet.org!"
          echo "📦 Package URL: https://www.nuget.org/packages/FileFlux/${{ needs.detect-version.outputs.version }}"

      - name: ❌ Failure Notification  
        if: needs.create-release.result != 'success'
        run: |
          echo "❌ Failed to publish FileFlux v${{ needs.detect-version.outputs.version }}"
          exit 1